Binary trees
Perfect binary tree 
Estructura do


Un Binary Search Tree básicamente costa de un elemento root 
(El elemento padre del que todos descienden). Es a partir de ese elemento en donde se empieza la búsqueda.
.
La condición es simple, un elemento únicamente puede tener dos descendientes, no más. 
Los descendientes que son mayores que el elemento padre se colocan del lado derecho y los 
descendientes que son menores se colocan del lado izquierdo, simple, ¿verdad?
.
Para buscar en un Binary Search Tree simplemente tienes que preguntarte: 
¿Este elemento es mayor o menor que el que estoy buscando? Ohh es mayor, 
entonces me voy para la izquierda, y así sucesivamente hasta que encuentres 
el elemento que estabas buscando.

Root o Raiz: Es el nodo superior de todo el arbol, si sabes HTML(lo mas probable es que si) seria como en el DOM el HTML es el elemento root o más bien el padre
Parent / Padre: Contienen ramas que apuntan a otros nodos
Child / Hijos: Es un nodo conectado directamente con otro cuando se aleja de la raiz
Lead / Hojas: Un nodo sin hijos
Sibling / Hermanos: Son un conjunto de nodos que vienen del mismo padre
Sub Tree / Sub Arbol: Son arboles que estan dentro de nodos
Arm / Baso: Es la conexión entre un nodo y otro
<h3>Binary Trees / Arboles Binarios</h3> <h4>Perfect Binary Tree</h4> <h3>Este tipo de arboles en concreto lo que hacen es que sus nodos se van multiplicando y van aumentando y a esto se le llama arbol balanceado porque tiene la misma cantidad de nodos en ambos lados, un ejemplo visual seria algo así:</h3>